name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24.4'

    - name: Update dependencies
      run: |
        go get -u all
        go mod tidy

    - name: Get version
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build all platforms
      run: |
        mkdir -p build
        VERSION="${{ steps.version.outputs.VERSION }}"
        
        # Linux AMD64
        GOOS=linux GOARCH=amd64 go build -ldflags="-s -w -X main.version=$VERSION" -o build/github-profiler-linux-amd64 .
        
        # Linux ARM64
        GOOS=linux GOARCH=arm64 go build -ldflags="-s -w -X main.version=$VERSION" -o build/github-profiler-linux-arm64 .
        
        # macOS AMD64
        GOOS=darwin GOARCH=amd64 go build -ldflags="-s -w -X main.version=$VERSION" -o build/github-profiler-darwin-amd64 .
        
        # macOS ARM64 (Apple Silicon)
        GOOS=darwin GOARCH=arm64 go build -ldflags="-s -w -X main.version=$VERSION" -o build/github-profiler-darwin-arm64 .
        
        # Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="-s -w -X main.version=$VERSION" -o build/github-profiler-windows-amd64.exe .

    - name: Create archives
      run: |
        cd build
        VERSION="${{ steps.version.outputs.VERSION }}"
        
        # Create tar.gz for Unix systems
        tar -czf github-profiler-$VERSION-linux-amd64.tar.gz github-profiler-linux-amd64
        tar -czf github-profiler-$VERSION-linux-arm64.tar.gz github-profiler-linux-arm64
        tar -czf github-profiler-$VERSION-darwin-amd64.tar.gz github-profiler-darwin-amd64
        tar -czf github-profiler-$VERSION-darwin-arm64.tar.gz github-profiler-darwin-arm64
        
        # Create zip for Windows
        zip github-profiler-$VERSION-windows-amd64.zip github-profiler-windows-amd64.exe
        
        # Generate checksums
        sha256sum *.tar.gz *.zip > SHA256SUMS

    - name: Generate release notes
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [[ -n "$LAST_TAG" ]]; then
          CHANGELOG=$(git log --oneline $LAST_TAG..HEAD)
        else
          CHANGELOG=$(git log --oneline -10)
        fi
        
        cat << EOF > RELEASE_NOTES.md
        ## GitHub Profiler $VERSION
        
        Professional GitHub user analysis tool with interactive TUI.
        
        ### Changes
        $CHANGELOG
        
        ### Quick Install
        
        **Linux/macOS:**
        \`\`\`bash
        # Download and install
        curl -L "https://github.com/Typeflu/Temp/releases/download/$VERSION/github-profiler-$VERSION-\$(uname -s | tr '[:upper:]' '[:lower:]')-\$(uname -m | sed 's/x86_64/amd64/').tar.gz" | tar xz
        sudo mv github-profiler-* /usr/local/bin/github-profiler
        \`\`\`
        
        **Windows:**
        Download the zip file and extract to your PATH.
        
        ### Usage
        \`\`\`bash
        github-profiler          # Interactive mode
        github-profiler octocat  # Analyze user
        github-profiler demo     # Demo mode
        \`\`\`
        
        ### Verification
        \`\`\`bash
        sha256sum -c SHA256SUMS
        \`\`\`
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: "GitHub Profiler ${{ steps.version.outputs.VERSION }}"
        body_path: RELEASE_NOTES.md
        files: build/*
        prerelease: ${{ github.event.inputs.prerelease || false }}
        make_latest: ${{ !github.event.inputs.prerelease }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
